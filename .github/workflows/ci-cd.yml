# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mlflow scikit-learn
        # You might need to install other deps for train.py

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # (Optional) Add a step here to run train.py if you want CI to retrain
    # - name: Run Training Script
    #   run: python scripts/train.py

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/iris-classifier-app:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to a server (Example)
      run: |
        echo "This is where you would SSH into a server and run 'docker run...'"
        echo "For this assignment, just printing the command is enough."
        echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/iris-classifier-app:latest"
        echo "docker run -d -p 80:8000 ${{ secrets.DOCKERHUB_USERNAME }}/iris-classifier-app:latest"
        docker version
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.SERVER_HOST }}
#        username: ${{ secrets.SERVER_USERNAME }}
#        key: ${{ secrets.SSH_PRIVATE_KEY }}
#        script: |
#          # Pull the latest image from Docker Hub
#          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/iris-classifier-app:latest
#
#          # Stop and remove the old container if it exists
#          docker stop iris-classifier-app || true
#          docker rm iris-classifier-app || true
#
#          # Run the new container
#          docker run -d --name iris-classifier-app -p 80:8000 ${{ secrets.DOCKERHUB_USERNAME }}/iris-classifier-app:latest







